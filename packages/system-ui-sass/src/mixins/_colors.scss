/// color-css-variables
@mixin color-css-variables($colors) {
  :root {
    @each $color, $value in $colors {
      // hack for fixing variables name like $white, $black converted to #hex or rgba() values
      // this happen only with css var, not regular class name like color classes in the very next mixin
      $str-color: quote($color);
      --color-#{unquote($str-color)}: #{$value};
    }
  }
}

/// color-classes
@mixin color-classes($colors) {

  @each $color, $value in $colors {
    .color-#{$color} {
      color: $value;
    }
    .bg-#{$color} {
      background-color: $value;
    }
  }

}

@mixin text-contrast($n) {
  $color-brightness: round(
    (red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000
  );
  $light-color: round(
    (red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000
  );

  @if abs($color-brightness) < ($light-color/2) {
    color: lighten($n, 80%);
  } @else {
    color: darken($n, 50%);
  }
}

@function color($key) {
  $color: map-get($colors, $key);

  @if not $color {
    @error "color `#{$key}` not found in `#{$colors}`";
  }

  @return $color;
}
