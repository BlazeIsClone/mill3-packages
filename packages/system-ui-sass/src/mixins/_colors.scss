/// color-css-variables
@mixin color-css-variables($colors) {
  :root {
    @each $color, $value in $colors {
      // color grouped in theme
      @if type-of($value) == "map" {
        @each $c, $c_value in $value {
          --color-#{$c}: #{$c_value};
        }
        // first level color values
      } @else {
        --color-#{$color}: #{$value};
      }
    }
  }
}

/// color-classes
@mixin color-classes($color, $value) {
  .color-#{$color} {
    color: var(--color-#{$color});
  }

  .bg-#{$color},
  .background-#{$color},
  .background-color--#{$color} {
    background-color: var(--color-#{$color});
  }

  // TODO: move this in a border module/mixins
  .border-color-#{$color} {
    border-color: var(--color-#{$color});
  }
}

@mixin text-contrast($n) {
  $color-brightness: round(
    (red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000
  );
  $light-color: round(
    (red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000
  );

  @if abs($color-brightness) < ($light-color/2) {
    color: lighten($n, 80%);
  } @else {
    color: darken($n, 50%);
  }
}

@function color($key) {
  $color: map-get($colors, $key);

  @if not $color {
    @error "color `#{$key}` not found in `#{$colors}`";
  }

  @return $color;
}

@function gray($key) {
  $gray: map-get($grays, #{$key});

  @if not $gray {
    @error "color gray-#{$key} not found in `#{$grays}`";
  }

  @return $gray;
}
